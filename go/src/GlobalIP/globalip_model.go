//
// This file generated by rdl 1.5.0
//

package globalip

import (
	"encoding/json"
	"fmt"
	rdl "github.com/ardielle/ardielle-go/rdl"
)

var _ = rdl.Version
var _ = json.Marshal
var _ = fmt.Printf

//
// Octet -
//
type Octet string

//
// IPAddress -
//
type IPAddress string

//
// GlobalIPResponse -
//
type GlobalIPResponse struct {
	Origin IPAddress `json:"origin"`
}

//
// NewGlobalIPResponse - creates an initialized GlobalIPResponse instance, returns a pointer to it
//
func NewGlobalIPResponse(init ...*GlobalIPResponse) *GlobalIPResponse {
	var o *GlobalIPResponse
	if len(init) == 1 {
		o = init[0]
	} else {
		o = new(GlobalIPResponse)
	}
	return o
}

type rawGlobalIPResponse GlobalIPResponse

//
// UnmarshalJSON is defined for proper JSON decoding of a GlobalIPResponse
//
func (self *GlobalIPResponse) UnmarshalJSON(b []byte) error {
	var m rawGlobalIPResponse
	err := json.Unmarshal(b, &m)
	if err == nil {
		o := GlobalIPResponse(m)
		*self = o
		err = self.Validate()
	}
	return err
}

//
// Validate - checks for missing required fields, etc
//
func (self *GlobalIPResponse) Validate() error {
	if self.Origin == "" {
		return fmt.Errorf("GlobalIPResponse.origin is missing but is a required field")
	} else {
		val := rdl.Validate(GlobalIPSchema(), "IPAddress", self.Origin)
		if !val.Valid {
			return fmt.Errorf("GlobalIPResponse.origin does not contain a valid IPAddress (%v)", val.Error)
		}
	}
	return nil
}
